#!/usr/bin/env ruby

require 'zit'
require 'optparse'

options = {}
subcommand = ARGV.shift unless ARGV[0] == "--help" || ARGV == "-h"# The subcommand is the first argument. 

optparse = OptionParser.new do |opts|
  opts.banner = <<-EOS
Usage: 

The starting worflow is to begin your work. Use the subcommand "init" as in:

zit init -c CONNECTOR [params]

The finishing workflow, for when you are ready to create a pull request uses the "finish" subcommand, as in:

zit finish -c CONNECTOR

You can, additionally, run zit update -c CONNECTOR to post the now saved PR to the ticket.

The params for init are as follows:

EOS

  # optparse doesn't like subcommands. So neither of the following are output when you call help.
  ["init", "finish", "update"].each do |flow|
    options[flow.to_sym] = (subcommand == flow ? true : false)
  end

  # These options are output.

  opts.on('-c', '--connector NAME', [:jira, :zendesk], "The connector. Either \"zendesk\" or \"jira\".") do |connector|
    options[:system] = connector
  end
  
  opts.separator("") 
  opts.separator("If working with Jira, the following are required params:")
 

  opts.on("-p", "--project PROJECT", "The Jira project code.") do |project|
    options[:project] = project
  end

  opts.on("-i", "--issue ISSUE", "The Jira issue number.") do |issue|
    options[:foreign_key] = issue
  end

  opts.separator("")
  opts.separator("If working with Zendesk, the following are required params:")

  opts.on("-t", "--ticket TICKETID", "The ticket id of the Zendesk ticket.") do |tid|
    options[:foreign_key] = tid
  end

  opts.separator("")

  options[:quiet] = false
  opts.on("-q", "--quiet", "No pingbacks. No chatter to systems (jira/zendesk).") do
    options[:quiet] = true
  end

  opts.on('-h', '--help', 'This help dialog') do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  if subcommand == "init"
    if (options[:system].nil? || (options[:system] != :jira && options[:system] != :zendesk))
      puts "No connector, or incorrect connector specified."
      puts "#{options.inspect}, |#{options[:system]}|"
      exit
    end
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument, OptionParser::InvalidArgument
  puts $!.to_s
  puts optparse
  exit
end

zit_zap = Zit::Zap.new
zit_zap.init(options[:foreign_key], options[:system], options[:project], options[:quiet])   if options[:init]
zit_zap.finish(options[:quiet])                                                             if options[:finish]
zit_zap.update                                                                              if options[:update]
